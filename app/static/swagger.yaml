openapi: 3.0.0
info:
  title: Flask Auth and User API
  version: 1.0.0
  description: API for user authentication and management.
paths:
  /login:
    post:
      summary: User login
      description: Authenticate a user and return a JWT access token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                type: string
                example: "Wrong username or password"
  /register:
    post:
      summary: User registration
      description: Register a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                type: string
                example: "User created"
        '400':
          description: Email already in use
          content:
            application/json:
              schema:
                type: string
                example: "Email already in use"
  /protected:
    get:
      summary: Protected route
      description: Access a protected route requiring JWT authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully accessed protected route
          content:
            application/json:
              schema:
                type: object
                properties:
                  logged_as:
                    type: string
                    example: "user@example.com"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                example: "Missing Authorization Header"
  /logout:
    delete:
      summary: User logout
      description: Revoke the JWT of the authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token successfully revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: "JWT revoked"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                example: "Missing Authorization Header"
  /user/email:
    put:
      summary: Update user email
      description: Update the authenticated user's email.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "newemail@example.com"
      responses:
        '200':
          description: Email successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email updated"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                example: "Missing Authorization Header"
  /user/password:
    put:
      summary: Update user password
      description: Update the authenticated user's password.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: "newpassword123"
      responses:
        '200':
          description: Password successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password updated"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: string
                example: "Missing Authorization Header"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
